#Dish table
type Dish
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  image: String
  price: Float
  special_today: Boolean
  description: String
  orders: [DishOrder] @connection(keyName: "byDish", fields: ["id"])
}

#Bridge table for Dish and Order
type DishOrder
  @model(queries: null, subscriptions: null)
  @key(name: "byDish", fields: ["dish_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "dish_id"])
  @auth(
    rules: [
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  dish_id: ID!
  order_id: ID!
  dish: Dish @connection(fields: ["dish_id"])
  order: Order @connection(fields: ["order_id"])
}

#Order table
type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  dishes: [DishOrder] @connection(keyName: "byOrder", fields: ["id"])
}

#Dish cart table
input DishCart {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

#Order Fields
input OrderFields {
  id: ID!
  cart: [DishCart]
  total: Float!
  token: String!
  address: String
}

#Status enumeration
enum CheckStatus {
  OK
  NO
}

#Custom Mutation type
type Mutation {
  ordering(input: OrderFields!): CheckStatus
    @function(name: "paymentLambda-${env}")
    @function(name: "orderLambda-${env}")
}
